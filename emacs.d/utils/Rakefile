#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#


DOT_EMACS_ROOT = '../'
DEFAULT_DIR = 'manual-install/'
TMP_DIR = DOT_EMACS_ROOT + 'tmp/'
ELISP_FROM_WEB_LIST = {
  'auto-install' => {
    dir: DEFAULT_DIR,
    url: 'http://www.emacswiki.org/emacs/download/auto-install.el'
  },
  'tabbar' => {
    dir: DEFAULT_DIR,
    url: 'http://www.emacswiki.org/emacs/download/tabbar.el'
  },
  'auto-save-buffers' => {
    dir: DEFAULT_DIR,
    url: 'http://0xcc.net/misc/auto-save/auto-save-buffers.el'
  },
  'markdown-mode' => {
    dir: DEFAULT_DIR,
    url: 'http://jblevins.org/git/markdown-mode.git/plain/markdown-mode.el'
  },
  'groovy-mode' => {
    dir: DEFAULT_DIR,
    url: 'https://launchpad.net/groovy-emacs-mode/trunk/current-release/+download/emacs-groovy-mode_2011-06-29.tgz'
  },
  'dired-single' => {
    dir: DEFAULT_DIR,
    url: 'http://www.emacswiki.org/emacs/download/dired-single.el'
  },
  'ipa' => {
    dir: DEFAULT_DIR,
    url: 'http://emacswiki.org/emacs/download/ipa.el'
  },
  'session' => {
    dir: DEFAULT_DIR,
    url: 'http://sourceforge.net/projects/emacs-session/files/session/session-2.3a.tar.gz'
  },
  'viewer' => {
    dir: DEFAULT_DIR,
    url: 'http://www.emacswiki.org/emacs/download/viewer.el'
  },
  'igrep' => {
    dir: DEFAULT_DIR,
    url: 'http://www.emacswiki.org/cgi-bin/emacs/download/igrep.el'
  },
  'grep-edit' => {
    dir: DEFAULT_DIR,
    url: 'http://emacswiki.org/emacs/download/grep-edit.el'
  },
  'ruby-block' => {
    dir: DEFAULT_DIR,
    url: 'http://www.emacswiki.org/emacs/download/ruby-block.el'
  },
}



ELISP_FROM_LOCAL_LIST = {
  'ruby-mode' => {
    dir: DEFAULT_DIR,
    command: "./install_ruby-mode.sh #{DOT_EMACS_ROOT}#{DEFAULT_DIR}"
  },
}


download_command = :curl

def install_elisp_with_tgz(dir, url, command, elisp)
  install_dir = File.expand_path "#{DOT_EMACS_ROOT}#{dir}"
  FileUtils.cd(TMP_DIR) do
    sh "wget --no-check-certificate #{url}"
    sh "tar -zxvf #{File.basename url}"
    Dir.glob("**/*").each do |f|
      next if f == '.' || f == '..'

      ext = File.extname(f)
      sh "cp #{f} #{install_dir}" if ext == '.el'
      sh "rm #{f}"
    end
  end
end

def install_elisp_with_text(dir, url, command, elisp)
  install_dir = File.expand_path "#{DOT_EMACS_ROOT}#{dir}"
  if command == :curl
    sh "curl -X GET #{url} > #{install_dir}/#{elisp}.el "
  end
end

def install_elisp(dir, url, command, elisp)
  ext = File.extname(url.to_s)
  case ext
  when '.tgz'
    install_elisp_with_tgz(dir, url, command, elisp)
  when '.gz'
    install_elisp_with_tgz(dir, url, command, elisp)
  when '.el'
    install_elisp_with_text(dir, url, command, elisp)
  else
    puts "unknown ext #{ext}"
  end
end

def is_installed(elisp, dir)
  file_path = DOT_EMACS_ROOT + dir + elisp + '.el'
  File.exists?("#{file_path}")
end


desc "3rd party elispのwebからのinstall"
task :install_elisp do
  ELISP_FROM_WEB_LIST.each do |elisp, propaty|
    next if is_installed(elisp, propaty[:dir])

    puts "install #{elisp}...to #{propaty[:dir]}"
    if install_elisp(propaty[:dir], propaty[:url], download_command, elisp)
      puts "success!!"
    else
      puts "fail"
    end
  end

  ELISP_FROM_LOCAL_LIST.each do |elisp, propaty|
    next if is_installed(elisp, propaty[:dir])

    puts "install #{elisp}..."
    sh propaty[:command]
  end
end
